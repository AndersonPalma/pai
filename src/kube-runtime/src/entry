#!/usr/bin/env sh

# This script is entrypoint of pai runtime, this will copy run to /usr/local/pai/run
# which will be the entrypoint of task container. So `entry` running in runtime
# container, `/usr/local/pai/run` running in task container, and will be pid 1 in
# task container

PAI_DIR=/usr/local/pai
PAI_LOG_DIR=/usr/local/pai/logs/attempt-${FC_FRAMEWORK_ATTEMPT_ID}/role-${FC_TASKROLE_NAME}/idx-${FC_TASK_INDEX}/attempt-${FC_TASK_ATTEMPT_ID}/

MAIN_SH=$PAI_DIR/init/main.sh
LOG_FILE=$PAI_LOG_DIR/entry.log

mkdir -p $PAI_LOG_DIR
cp /pai-runtime/run $PAI_DIR
cp -r /pai-runtime/init $PAI_DIR

# do preparation for each script
for i in `find /pai-runtime/prep/ -type f -regex ".*.sh"` ; do
  file_name=`basename $i`
  $i > ${PAI_LOG_DIR}/prep_${file_name}.log 2>&1
done

# do service discovery
cd $PAI_LOG_DIR

/pai-runtime/frameworkbarrier > $PAI_LOG_DIR/barrier.log 2>&1
echo "barrier returns $?" >> $LOG_FILE
python /pai-runtime/parse.py framework.json > $PAI_DIR/runtime_env.sh 2> $PAI_LOG_DIR/parse.log
echo "parser.py returns $?" >> $LOG_FILE

# prepare main.sh, which is where user command get started
echo '#!/bin/sh' >> $MAIN_SH
echo -e "\n. $PAI_DIR/runtime_env.sh\n\n$USER_CMD" >> $MAIN_SH

chmod +x $MAIN_SH

# debug
echo -e "finished entry\nmain.sh has:" >> $LOG_FILE
cat $PAI_DIR/init/main.sh >> $LOG_FILE
echo -e "\nruntime_env.sh has:" >> $LOG_FILE
cat $PAI_DIR/runtime_env.sh >> $LOG_FILE
